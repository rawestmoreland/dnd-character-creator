{"ast":null,"code":"import _defineProperty from\"/Users/richard/Desktop/ReactApps/dnd-project/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/richard/Desktop/ReactApps/dnd-project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/richard/Desktop/ReactApps/dnd-project/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/richard/Desktop/ReactApps/dnd-project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/richard/Desktop/ReactApps/dnd-project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/richard/Desktop/ReactApps/dnd-project/client/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Button,Modal,ModalHeader,ModalBody,Form,FormGroup,Label,Input}from'reactstrap';import{connect}from'react-redux';import{addCharacter}from'../actions/characterActions';import{getClasses,getRaces}from'../actions/externalAPIActions';var CharacterModal=/*#__PURE__*/function(_Component){_inherits(CharacterModal,_Component);function CharacterModal(){var _getPrototypeOf2;var _this;_classCallCheck(this,CharacterModal);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(CharacterModal)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={// Modal is closed when page loads\nmodal:false,name:'',class:'',race:''};_this.toggle=function(){_this.setState({modal:!_this.state.modal});};_this.onChange=function(e){// Update the name state to show in the text box and have a name to submit\n_this.setState(_defineProperty({},e.target.name,e.target.value));console.log(_this.state);};_this.onSubmit=function(e){// Prevent the page from refreshing on submit\ne.preventDefault();var newCharacter={name:_this.state.name,class:_this.state.class,race:_this.state.race};// Add new character to the database\n_this.props.addCharacter(newCharacter);// Close the modal\n_this.toggle();};return _this;}_createClass(CharacterModal,[{key:\"componentDidMount\",value:function componentDidMount(){this.props.getClasses();this.props.getRaces();}// Toggle the modal visibility\n},{key:\"render\",value:function render(){var _this$props=this.props,races=_this$props.races,classes=_this$props.classes;return React.createElement(\"div\",null,React.createElement(Button,{color:\"dark\",style:{marginBottom:'2rem'},onClick:this.toggle},\"New Character\"),React.createElement(Modal,{isOpen:this.state.modal,toggle:this.toggle,centered:true},React.createElement(ModalHeader,{toggle:this.toggle},\"Add a New Character\"),React.createElement(ModalBody,null,React.createElement(Form,{onSubmit:this.onSubmit},React.createElement(FormGroup,null,React.createElement(Input,{type:\"text\",name:\"name\",id:\"name\",placeholder:\"Character Name\",className:\"mb-2\",onChange:this.onChange}),React.createElement(Input,{type:\"select\",name:\"race\",id:\"race\",className:\"mb-2\",onChange:this.onChange},React.createElement(\"option\",{default:true},\"Race\"),races!==undefined&&races.map(function(_ref){var name=_ref.name;return React.createElement(\"option\",{key:name,value:name},name);})),React.createElement(Input,{type:\"select\",name:\"class\",id:\"class\",className:\"mb-2\",onChange:this.onChange},React.createElement(\"option\",{default:true},\"Class\"),classes!==undefined&&classes.map(function(_ref2){var name=_ref2.name;return React.createElement(\"option\",{key:name,value:name},name);})),React.createElement(Button,{color:\"dark\",style:{marginTop:'2rem'},block:true},\"Add Character\"))))));}}]);return CharacterModal;}(Component);var mapStateToProps=function mapStateToProps(state){return{classes:state.external.classes.results,races:state.external.races.results};};export default connect(mapStateToProps,{addCharacter:addCharacter,getClasses:getClasses,getRaces:getRaces})(CharacterModal);","map":{"version":3,"sources":["/Users/richard/Desktop/ReactApps/dnd-project/client/src/components/CharacterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","connect","addCharacter","getClasses","getRaces","CharacterModal","state","modal","name","class","race","toggle","setState","onChange","e","target","value","console","log","onSubmit","preventDefault","newCharacter","props","races","classes","marginBottom","undefined","map","marginTop","mapStateToProps","external","results"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from 'reactstrap'\nimport { connect } from 'react-redux'\nimport { addCharacter } from '../actions/characterActions'\nimport { getClasses, getRaces } from '../actions/externalAPIActions'\nimport PropTypes from 'prop-types'\n\nclass CharacterModal extends Component {\n  state = {\n    // Modal is closed when page loads\n    modal: false,\n    name: '',\n    class: '',\n    race: ''\n  }\n\n  static propTypes = {\n    getClasses: PropTypes.func.isRequired,\n    addCharacter: PropTypes.func.isRequired,\n    getRaces: PropTypes.func.isRequired,\n    races: PropTypes.array,\n    clases: PropTypes.array\n  }\n\n  componentDidMount() {\n    this.props.getClasses()\n    this.props.getRaces()\n  }\n\n  // Toggle the modal visibility\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    })\n  }\n\n  // Change the state of the text input variables for the POST requests\n  onChange = e => {\n    // Update the name state to show in the text box and have a name to submit\n\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n    console.log(this.state)\n  }\n\n  onSubmit = e => {\n    // Prevent the page from refreshing on submit\n    e.preventDefault()\n\n    const newCharacter = {\n      name: this.state.name,\n      class: this.state.class,\n      race: this.state.race\n    }\n\n    // Add new character to the database\n    this.props.addCharacter(newCharacter)\n\n    // Close the modal\n    this.toggle()\n  }\n\n  render() {\n    const { races, classes } = this.props\n    return (\n      <div>\n        <Button\n          color='dark'\n          style={{ marginBottom: '2rem' }}\n          onClick={this.toggle}\n        >\n          New Character\n        </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle}>Add a New Character</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Input\n                  type='text'\n                  name='name'\n                  id='name'\n                  placeholder='Character Name'\n                  className='mb-2'\n                  onChange={this.onChange}\n                />\n                <Input\n                  type='select'\n                  name='race'\n                  id='race'\n                  className='mb-2'\n                  onChange={this.onChange}\n                >\n                  <option default>Race</option>\n                  {races !== undefined &&\n                    races.map(({ name }) => (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    ))}\n                </Input>\n                <Input\n                  type='select'\n                  name='class'\n                  id='class'\n                  className='mb-2'\n                  onChange={this.onChange}\n                >\n                  <option default>Class</option>\n                  {classes !== undefined &&\n                    classes.map(({ name }) => (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    ))}\n                </Input>\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\n                  Add Character\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  classes: state.external.classes.results,\n  races: state.external.races.results\n})\n\nexport default connect(\n  mapStateToProps,\n  { addCharacter, getClasses, getRaces }\n)(CharacterModal)\n"]},"metadata":{},"sourceType":"module"}
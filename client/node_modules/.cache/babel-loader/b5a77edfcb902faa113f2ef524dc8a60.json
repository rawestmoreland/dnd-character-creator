{"ast":null,"code":"var _jsxFileName = \"/Users/richard/Desktop/ReactApps/dnd-project/client/src/components/CharacterModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { addCharacter } from '../actions/characterActions';\nimport { getClasses, getRaces } from '../actions/externalAPIActions';\nimport PropTypes from 'prop-types';\n\nclass CharacterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Modal is closed when page loads\n      modal: false,\n      name: '',\n      class: '',\n      race: ''\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.edit = () => {\n      this.setState({\n        edit: true\n      });\n    };\n\n    this.onChange = e => {\n      // Update the name state to show in the text box and have a name to submit\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n      console.log(this.state);\n    };\n\n    this.onSubmit = e => {\n      // Prevent the page from refreshing on submit\n      e.preventDefault();\n      const newCharacter = {\n        name: this.state.name,\n        class: this.state.class,\n        race: this.state.race\n      }; // Add new character to the database\n\n      this.props.addCharacter(newCharacter); // Close the modal\n\n      this.toggle();\n    };\n  }\n\n  componentDidMount() {\n    this.props.getClasses();\n    this.props.getRaces();\n  } // Toggle the modal visibility\n\n\n  render() {\n    const _this$props = this.props,\n          races = _this$props.races,\n          classes = _this$props.classes;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '1rem'\n      },\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"New Character\"), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Add a New Character\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Character Name\",\n      className: \"mb-2\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Input, {\n      type: \"select\",\n      name: \"race\",\n      id: \"race\",\n      className: \"mb-2\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      default: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Race\"), races !== undefined && races.map(({\n      name\n    }) => React.createElement(\"option\", {\n      key: name,\n      value: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, name))), React.createElement(Input, {\n      type: \"select\",\n      name: \"class\",\n      id: \"class\",\n      className: \"mb-2\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      default: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Class\"), classes !== undefined && classes.map(({\n      name\n    }) => React.createElement(\"option\", {\n      key: name,\n      value: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, name))), React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Add Character\"))))));\n  }\n\n}\n\nCharacterModal.propTypes = {\n  getClasses: PropTypes.func.isRequired,\n  addCharacter: PropTypes.func.isRequired,\n  getRaces: PropTypes.func.isRequired,\n  races: PropTypes.array,\n  clases: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  classes: state.external.classes.results,\n  races: state.external.races.results\n});\n\nexport default connect(mapStateToProps, {\n  addCharacter,\n  getClasses,\n  getRaces\n})(CharacterModal);","map":{"version":3,"sources":["/Users/richard/Desktop/ReactApps/dnd-project/client/src/components/CharacterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","Row","connect","addCharacter","getClasses","getRaces","PropTypes","CharacterModal","state","modal","name","class","race","toggle","setState","edit","onChange","e","target","value","console","log","onSubmit","preventDefault","newCharacter","props","componentDidMount","render","races","classes","marginBottom","undefined","map","marginTop","propTypes","func","isRequired","array","clases","mapStateToProps","external","results"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Row\n} from 'reactstrap'\nimport { connect } from 'react-redux'\nimport { addCharacter } from '../actions/characterActions'\nimport { getClasses, getRaces } from '../actions/externalAPIActions'\nimport PropTypes from 'prop-types'\n\nclass CharacterModal extends Component {\n  state = {\n    // Modal is closed when page loads\n    modal: false,\n    name: '',\n    class: '',\n    race: ''\n  }\n\n  static propTypes = {\n    getClasses: PropTypes.func.isRequired,\n    addCharacter: PropTypes.func.isRequired,\n    getRaces: PropTypes.func.isRequired,\n    races: PropTypes.array,\n    clases: PropTypes.array\n  }\n\n  componentDidMount() {\n    this.props.getClasses()\n    this.props.getRaces()\n  }\n\n  // Toggle the modal visibility\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    })\n  }\n\n  // Whether or not the delete button shows. Also disables the Link component\n  edit = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  // Change the state of the text input variables for the POST requests\n  onChange = e => {\n    // Update the name state to show in the text box and have a name to submit\n\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n    console.log(this.state)\n  }\n\n  onSubmit = e => {\n    // Prevent the page from refreshing on submit\n    e.preventDefault()\n\n    const newCharacter = {\n      name: this.state.name,\n      class: this.state.class,\n      race: this.state.race\n    }\n\n    // Add new character to the database\n    this.props.addCharacter(newCharacter)\n\n    // Close the modal\n    this.toggle()\n  }\n\n  render() {\n    const { races, classes } = this.props\n    return (\n      <div>\n        <Button\n          color='dark'\n          style={{ marginBottom: '1rem' }}\n          onClick={this.toggle}\n        >\n          New Character\n        </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle}>Add a New Character</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Input\n                  type='text'\n                  name='name'\n                  id='name'\n                  placeholder='Character Name'\n                  className='mb-2'\n                  onChange={this.onChange}\n                />\n                <Input\n                  type='select'\n                  name='race'\n                  id='race'\n                  className='mb-2'\n                  onChange={this.onChange}\n                >\n                  <option default>Race</option>\n                  {races !== undefined &&\n                    races.map(({ name }) => (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    ))}\n                </Input>\n                <Input\n                  type='select'\n                  name='class'\n                  id='class'\n                  className='mb-2'\n                  onChange={this.onChange}\n                >\n                  <option default>Class</option>\n                  {classes !== undefined &&\n                    classes.map(({ name }) => (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    ))}\n                </Input>\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\n                  Add Character\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  classes: state.external.classes.results,\n  races: state.external.races.results\n})\n\nexport default connect(\n  mapStateToProps,\n  { addCharacter, getClasses, getRaces }\n)(CharacterModal)\n"]},"metadata":{},"sourceType":"module"}
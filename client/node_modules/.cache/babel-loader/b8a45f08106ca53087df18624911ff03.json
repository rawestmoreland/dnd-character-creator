{"ast":null,"code":"var _jsxFileName = \"/Users/richard/Desktop/ReactApps/dnd-project/client/src/components/CharacterModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { addCharacter } from '../actions/characterActions';\nimport { getClasses, getRaces } from '../actions/externalAPIActions';\nimport PropTypes from 'prop-types';\n\nclass CharacterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Modal is closed when page loads\n      modal: false,\n      name: '',\n      class: '',\n      race: '',\n      gender: ''\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.edit = () => {\n      this.setState({\n        edit: true\n      });\n    };\n\n    this.onChange = e => {\n      // Update the name state to show in the text box and have a name to submit\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      // Prevent the page from refreshing on submit\n      e.preventDefault();\n      const newCharacter = {\n        name: this.state.name,\n        class: this.state.class,\n        race: this.state.race,\n        gender: this.state.gender\n      }; // Add new character to the database\n\n      this.props.addCharacter(newCharacter); // Close the modal\n\n      this.toggle();\n    };\n  }\n\n  componentDidMount() {\n    this.props.getClasses();\n    this.props.getRaces();\n  } // Toggle the modal visibility\n\n\n  render() {\n    const _this$props = this.props,\n          races = _this$props.races,\n          classes = _this$props.classes;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '1rem'\n      },\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"New Character\"), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Add a New Character\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"This is where character picking stuff will go\"))));\n  }\n\n}\n\nCharacterModal.propTypes = {\n  getClasses: PropTypes.func.isRequired,\n  addCharacter: PropTypes.func.isRequired,\n  getRaces: PropTypes.func.isRequired,\n  races: PropTypes.array,\n  clases: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  classes: state.external.classes.results,\n  races: state.external.races.results\n});\n\nexport default connect(mapStateToProps, {\n  addCharacter,\n  getClasses,\n  getRaces\n})(CharacterModal);","map":{"version":3,"sources":["/Users/richard/Desktop/ReactApps/dnd-project/client/src/components/CharacterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","Row","connect","addCharacter","getClasses","getRaces","PropTypes","CharacterModal","state","modal","name","class","race","gender","toggle","setState","edit","onChange","e","target","value","onSubmit","preventDefault","newCharacter","props","componentDidMount","render","races","classes","marginBottom","propTypes","func","isRequired","array","clases","mapStateToProps","external","results"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n\tButton,\n\tModal,\n\tModalHeader,\n\tModalBody,\n\tForm,\n\tFormGroup,\n\tLabel,\n\tInput,\n\tRow\n} from 'reactstrap'\nimport { connect } from 'react-redux'\nimport { addCharacter } from '../actions/characterActions'\nimport { getClasses, getRaces } from '../actions/externalAPIActions'\nimport PropTypes from 'prop-types'\n\nclass CharacterModal extends Component {\n\tstate = {\n\t\t// Modal is closed when page loads\n\t\tmodal: false,\n\t\tname: '',\n\t\tclass: '',\n\t\trace: '',\n\t\tgender: ''\n\t}\n\n\tstatic propTypes = {\n\t\tgetClasses: PropTypes.func.isRequired,\n\t\taddCharacter: PropTypes.func.isRequired,\n\t\tgetRaces: PropTypes.func.isRequired,\n\t\traces: PropTypes.array,\n\t\tclases: PropTypes.array\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.getClasses()\n\t\tthis.props.getRaces()\n\t}\n\n\t// Toggle the modal visibility\n\ttoggle = () => {\n\t\tthis.setState({\n\t\t\tmodal: !this.state.modal\n\t\t})\n\t}\n\n\t// Whether or not the delete button shows. Also disables the Link component\n\tedit = () => {\n\t\tthis.setState({\n\t\t\tedit: true\n\t\t})\n\t}\n\n\t// Change the state of the text input variables for the POST requests\n\tonChange = e => {\n\t\t// Update the name state to show in the text box and have a name to submit\n\n\t\tthis.setState({\n\t\t\t[e.target.name]: e.target.value\n\t\t})\n\t}\n\n\tonSubmit = e => {\n\t\t// Prevent the page from refreshing on submit\n\t\te.preventDefault()\n\n\t\tconst newCharacter = {\n\t\t\tname: this.state.name,\n\t\t\tclass: this.state.class,\n\t\t\trace: this.state.race,\n\t\t\tgender: this.state.gender\n\t\t}\n\n\t\t// Add new character to the database\n\t\tthis.props.addCharacter(newCharacter)\n\n\t\t// Close the modal\n\t\tthis.toggle()\n\t}\n\n\trender() {\n\t\tconst { races, classes } = this.props\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Button\n\t\t\t\t\tcolor='dark'\n\t\t\t\t\tstyle={{ marginBottom: '1rem' }}\n\t\t\t\t\tonClick={this.toggle}\n\t\t\t\t>\n\t\t\t\t\tNew Character\n\t\t\t\t</Button>\n\t\t\t\t<Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n\t\t\t\t\t<ModalHeader toggle={this.toggle}>Add a New Character</ModalHeader>\n\t\t\t\t\t<ModalBody>\n\t\t\t\t\t\t<p>This is where character picking stuff will go</p>\n\t\t\t\t\t</ModalBody>\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tclasses: state.external.classes.results,\n\traces: state.external.races.results\n})\n\nexport default connect(mapStateToProps, { addCharacter, getClasses, getRaces })(\n\tCharacterModal\n)\n"]},"metadata":{},"sourceType":"module"}